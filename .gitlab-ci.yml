image: blockstream/gdk-debian-ci@sha256:ad70c900e92c79866cc92d3acc3a0afd22db63209cee4d35e46b3cc2f26ad7a3

stages:
  - format
  - docker_build
  - build
  - test
  - release
  - publish

include:
  - gitlab/common.yml
  - gitlab/android.yml
  - gitlab/ios.yml
  - gitlab/docker.yml

## disables MR-triggered pipelines and allows only branch-triggered pipelines
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always



.py_release:
  tags:
    - ga
  variables:
    INSTALL_PATH: "gdk-python"
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 day
    when: on_success
    paths:
    - $INSTALL_PATH



test_format:
  tags:
    - ga
  stage: format
  needs: []
  script:
    - ./tools/format.sh && git diff --exit-code



build_gcc_bullseye:
  extends: .py_release
  stage: build
  needs: [ test_format ]
  script:
    - ./tools/build.sh --gcc --buildtype release --install $INSTALL_PATH --python-version 3.9 --no-deps-rebuild --external-deps-dir /prebuild/gcc --parallel 16


build_clang_bullseye:
  tags:
    - ga
  stage: build
  needs: [ test_format ]
  script:
    - ./tools/build.sh --clang --buildtype release --install $INSTALL_PATH --python-version 3.9 --no-deps-rebuild --external-deps-dir /prebuild/clang --parallel 16 --enable-tests
  artifacts:
    expire_in: 2 hrs
    paths:
      - build-clang/tests
      - build-clang/CTestTestfile.cmake

test_clang_bullseye:
  tags:
    - ga
  stage: test
  needs: [build_clang_bullseye]
  script:
    - cd build-clang
    - ctest



test_rust:
  tags:
    - ga
  needs: []
  stage: test
  variables:
    OPENSSL_DIR: "/prebuild/clang/openssl/build/"
    WALLY_DIR: "/prebuild/clang/libwally-core/build/lib"
    RUSTFLAGS: "-C instrument-coverage"
    RUST_BACKTRACE: "1"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
  script:
    - cargo nextest run --profile ci --manifest-path subprojects/gdk_rust/Cargo.toml
    - grcov --binary-path subprojects/gdk_rust/target/debug/ -t cobertura --branch --ignore-not-existing --ignore "*cargo*" -o coverage.xml -p `pwd` subprojects/gdk_rust
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 5 days
    paths:
      - subprojects/gdk_rust/target/nextest/ci/junit.xml
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: subprojects/gdk_rust/target/nextest/ci/junit.xml
  allow_failure: true

rust_audit:
  tags:
    - ga
  needs: []
  stage: test
  allow_failure: true
  script:
    - cd subprojects/gdk_rust/
    - cargo audit -D warnings --ignore RUSTSEC-2021-0127



build_clang_fedora:
  image: blockstream/gdk-fedora-builder@sha256:73506cb284ab193f433ed4f16a86c867e6a6c1211a59b9c51686808a9f0947ea
  tags:
    - ga
  stage: build
  needs: [ test_format ]
  script:
    - source /root/.cargo/env
    - ./tools/build.sh --clang --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/clang --parallel 16

build_gcc_ubuntu20.04:
  image: blockstream/gdk-ubuntu-builder@sha256:253f844cfca099848bc9b23049f04ba73fb6222b68094991516b2604410ad2e9
  extends: .py_release
  stage: build
  needs: [ test_format ]
  script:
    - ./tools/build.sh --gcc --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/gcc --parallel 16



build_clang_osx:
  extends: 
    - .osx_env
    - .py_release
  tags:
    - osx-ia
  stage: build
  needs: [ test_format ]
  script:
    - cd $CI_PROJECT_DIR
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install -r ./tools/requirements.txt
    - PREBUILT_DIR="$CI_BUILDS_DIR/$PREBUILT_SUBDIR/clang-osx"
    - if [[ ! -d "$PREBUILT_DIR" ]]; then ./tools/builddeps.sh --parallel 16 --clang --prefix $PREBUILT_DIR; fi
    - touch $PREBUILT_DIR/last_use # marking last use to help out during sweeping operations
    - ./tools/build.sh --clang --buildtype release --install $INSTALL_PATH --no-deps-rebuild --python-version venv --external-deps-dir $PREBUILT_DIR --parallel 16

build_clang_osx_m1:
  extends: 
    - .osx_env
    - .py_release
  tags:
    - osx-m1
  stage: build
  needs: [ test_format ]
  script:
    - cd $CI_PROJECT_DIR
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install -r ./tools/requirements.txt
    - PREBUILT_DIR="$CI_BUILDS_DIR/$PREBUILT_SUBDIR/clang-osx-m1"
    - if [[ ! -d "$PREBUILT_DIR" ]]; then ./tools/builddeps.sh --parallel 16 --clang --prefix $PREBUILT_DIR; fi
    - touch $PREBUILT_DIR/last_use # marking last use to help out during sweeping operations
    - ./tools/build.sh --clang --buildtype release --install $INSTALL_PATH --no-deps-rebuild --python-version venv --external-deps-dir $PREBUILT_DIR --parallel 16



build_mingw64_windows:
  tags:
    - ga
  stage: build
  needs: [ test_format ]
  variables:
    INSTALL_PATH: "install-gdk"
  script:
    - ./tools/build.sh --mingw-w64 --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/mingw-w64 --parallel 16
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 hour
    when: on_success
    paths:
    - $INSTALL_PATH



apidocs:
  tags:
    - ga
  stage: build
  needs: [ test_format ]
  artifacts:
    expire_in: 14 days
    when: on_success
    paths:
    - apidocs.tar.gz
  script:
    - virtualenv -p python3 .venv
    - source .venv/bin/activate
    - pip3 install -r docs/requirements.txt
    - sphinx-build -b html -a -c docs/source docs/source docs/build/html
    - cd docs/build && tar czf ../../apidocs.tar.gz html/ && cd ../..
    - deactivate



release-python:
  tags:
    - garelease
  stage: release
  needs: [ build_gcc_bullseye, build_clang_osx, build_clang_osx_m1 ]
  script:
    - cd $CI_PROJECT_DIR
    - mkdir -p gdk_dist/share/python
    - find gdk-python/ -name *.whl -exec mv {} gdk_dist/ \;
    - cd gdk_dist
    - /opt/process_release
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 14 days
    paths:
    - $CI_PROJECT_DIR/gdk_dist
    when: on_success

upload-python-gcloud:
  extends: .gcloud-publish
  needs: [ release-python ]
  script:
    - url=${GCLOUD_URL}/${subfolder}/python
    - echo ${url}
    - TMPF=$(mktemp) || exit 1
    - echo $GCLOUD_PUSH_KEY > $TMPF
    - export GOOGLE_APPLICATION_CREDENTIALS=$TMPF
    - gcloud auth activate-service-account --key-file=$TMPF
    - gsutil cp -r $CI_PROJECT_DIR/gdk_dist ${url}
    - rm -rf $TMPF
