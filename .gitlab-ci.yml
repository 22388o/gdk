image: blockstream/gdk-debian-ci@sha256:8c907501397134ed470e7add52cfeb29743899cefaccead7299c3c75cfb45acd

stages:
  - format
  - build
  - test
  - deploy
  - publish
  - docker_build

include:
  - gitlab/**.yaml

## disables MR-triggered pipelines and allows only branch-triggered pipelines
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

.ndk_release:
  tags:
    - ga
  variables:
    INSTALL_PATH: "gdk-android-jni"
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 day
    when: on_success
    paths:
    - $INSTALL_PATH



.py_release:
  tags:
    - ga
  variables:
    INSTALL_PATH: "gdk-python"
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 day
    when: on_success
    paths:
    - $INSTALL_PATH



    ##### WARNING!!!!
    # $PREBUILT_SUBDIR is the folder for the DIY caching system we have in place in mac machines
    # BUILD_IDX is your life belt in case you messed the CI up during the prebuild phase and the PREBUILT_DIR folder
    # is left in an unconsistent state, just change the BUILD_IDX and you are good to go.
    # when merged, go through all mac machines to delete old version of cache and reclaim some storage space
.osx_env:
  variables:
    BUILD_IDX: "0"
  before_script:
    - idx=($(shasum tools/* cmake/profiles/* | shasum))
    - export PREBUILT_SUBDIR="prebuilt-${idx}-${BUILD_IDX}"


.ios_release:
  extends: .osx_env
  tags:
    - osx-ia
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 day
    when: on_success
    paths:
    - $INSTALL_PATH



test_format:
  tags:
    - ga
  stage: format
  needs: []
  script:
    - ./tools/format.sh && git diff --exit-code



build_gcc_bullseye:
  extends: .py_release
  stage: build
  script:
    - cmake -B build-gcc -S .
        -DEXTERNAL-DEPS-DIR=/prebuild/gcc
        -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/gcc.cmake
        -DCMAKE_BUILD_TYPE=Release
    - cmake --build build-gcc --target greenaddress-full --parallel 16
    - cmake --build build-gcc --target python-wheel --parallel 16
    - cmake --install build-gcc --prefix $INSTALL_PATH --strip
    - cmake --install build-gcc --prefix $INSTALL_PATH --component gdk-dev


build_clang_bullseye:
  tags:
    - ga
  stage: build
  script:
    - cmake -B build-clang -S .
        -DEXTERNAL-DEPS-DIR=/prebuild/clang
        -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/clang.cmake
        -DCMAKE_BUILD_TYPE=Release
        -DENABLE_TESTS:BOOL=TRUE
    - cmake --build build-clang --parallel 16
  artifacts:
    expire_in: 2 hrs
    paths:
      - build-clang/tests
      - build-clang/CTestTestfile.cmake

test_clang_bullseye:
  tags:
    - ga
  stage: test
  needs: [build_clang_bullseye]
  script:
    - cd build-clang
    - ctest



test_rust:
  tags:
    - ga
  needs: []
  stage: test
  variables:
    OPENSSL_DIR: "/prebuild/clang/openssl/build/"
    WALLY_DIR: "/prebuild/clang/libwally-core/build/lib"
    RUSTFLAGS: "-C instrument-coverage"
    RUST_BACKTRACE: "1"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
  script:
    - cargo nextest run --profile ci --manifest-path subprojects/gdk_rust/Cargo.toml
    - grcov --binary-path subprojects/gdk_rust/target/debug/ -t cobertura --branch --ignore-not-existing --ignore "*cargo*" -o coverage.xml -p `pwd` subprojects/gdk_rust
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 5 days
    paths:
      - subprojects/gdk_rust/target/nextest/ci/junit.xml
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: subprojects/gdk_rust/target/nextest/ci/junit.xml
  allow_failure: true

rust_audit:
  tags:
    - ga
  needs: []
  stage: test
  allow_failure: true
  script:
    - cd subprojects/gdk_rust/
    - cargo audit -D warnings --ignore RUSTSEC-2021-0127



build_clang_fedora:
  image: blockstream/gdk-fedora-builder@sha256:e8d48cfea943fd27110484375cb47c63db16f96a22d06f27e783f9fa782935bd
  tags:
    - ga
  stage: build
  script:
    - source /root/.cargo/env
    - cmake -B build-clang -S .
      -DEXTERNAL-DEPS-DIR:PATH=/prebuild/clang
      -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/clang.cmake
    - cmake --build build-clang --parallel 16

build_gcc_ubuntu20.04:
  image: blockstream/gdk-ubuntu-builder@sha256:984f85cf761c27857f15183767d335f217a76b58fde6944a68e5479ac4e32eec
  extends: .py_release
  stage: build
  script:
    - source /root/.cargo/env
    - cmake -B build-gcc -S .
      -DEXTERNAL-DEPS-DIR:PATH=/prebuild/gcc
      -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/gcc.cmake
    - cmake --build build-gcc --target python-wheel --parallel 16



build-android:
  extends: .ndk_release
  stage: build
  parallel:
    matrix:
      - PLATFORM: [android]
        ARCH: [armeabi-v7a, arm64-v8a, x86, x86_64]
  script:
    - cmake -DEXTERNAL-DEPS-DIR:PATH=/prebuild/$PLATFORM-$ARCH -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/$PLATFORM-$ARCH.cmake -B build -S .
    - cmake --build build --target java-bindings --parallel 16
    - cmake --install build --prefix ${INSTALL_PATH} --strip
    - cmake --install build --prefix ${INSTALL_PATH} --component gdk-java



build_clang_osx:
  extends: 
    - .osx_env
    - .py_release
  tags:
    - osx-ia
  stage: build
  script:
    - cd $CI_PROJECT_DIR
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install -r ./tools/requirements.txt
    - PREBUILT_DIR="$CI_BUILDS_DIR/$PREBUILT_SUBDIR/clang-osx"
    - if [[ ! -d "$PREBUILT_DIR" ]]; then ./tools/builddeps.sh --parallel 16 --clang --prefix $PREBUILT_DIR; fi
    - touch $PREBUILT_DIR/last_use # marking last use to help out during sweeping operations
    - cmake -B build-clang -S .
      -DEXTERNAL-DEPS-DIR:PATH=$PREBUILT_DIR
      -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/macOS.cmake
      -DPython_FIND_VIRTUALENV=ONLY
    - cmake --build build-clang --target greenaddress-full --parallel 16
    - cmake --build build-clang --target python-wheel --parallel 16
    - cmake --install build-clang --prefix $INSTALL_PATH --strip
    - cmake --install build-clang --prefix $INSTALL_PATH --component gdk-dev

build_clang_osx_m1:
  extends: 
    - .osx_env
    - .py_release
  tags:
    - osx-m1
  stage: build
  script:
    - cd $CI_PROJECT_DIR
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install -r ./tools/requirements.txt
    - PREBUILT_DIR="$CI_BUILDS_DIR/$PREBUILT_SUBDIR/clang-osx-m1"
    - if [[ ! -d "$PREBUILT_DIR" ]]; then ./tools/builddeps.sh --parallel 16 --clang --prefix $PREBUILT_DIR; fi
    - touch $PREBUILT_DIR/last_use # marking last use to help out during sweeping operations
    - cmake -B build-clang -S .
      -DEXTERNAL-DEPS-DIR:PATH=$PREBUILT_DIR
      -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/macOS.cmake
      -DPython_FIND_VIRTUALENV=ONLY
    - cmake --build build-clang --target greenaddress-full --parallel 16
    - cmake --build build-clang --target python-wheel --parallel 16
    - cmake --install build-clang --prefix $INSTALL_PATH --strip
    - cmake --install build-clang --prefix $INSTALL_PATH --component gdk-dev

build_osx_ios:
  extends: .ios_release
  stage: build
  variables:
    INSTALL_PATH: "gdk-iphone"
  script:
    - cd $CI_PROJECT_DIR
    - virtualenv venv && source venv/bin/activate && pip install -r ./tools/requirements.txt
    - PREBUILT_DIR="$CI_BUILDS_DIR/$PREBUILT_SUBDIR/ios"
    - if [[ ! -d "$PREBUILT_DIR" ]]; then ./tools/builddeps.sh --parallel 16 --iphone static --prefix $PREBUILT_DIR; fi
    - touch $PREBUILT_DIR/last_use # marking last use to help out during sweeping operations
    - cmake -B build-iphone -S .
      -DEXTERNAL-DEPS-DIR:PATH=$PREBUILT_DIR
      -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/iphoneos.cmake
      -DENABLE_SWIFT:BOOL=TRUE
    - cmake --build build-iphone --parallel 16
    - cmake --install build-iphone --prefix ${INSTALL_PATH} --strip
    - cmake --install build-iphone --prefix ${INSTALL_PATH} --component gdk-dev


build_osx_ios_sim:
  extends: .ios_release
  stage: build
  variables:
    INSTALL_PATH: "gdk-iphone-sim"
  script:
    - cd $CI_PROJECT_DIR
    - virtualenv venv && source venv/bin/activate && pip install -r ./tools/requirements.txt
    - PREBUILT_DIR="$CI_BUILDS_DIR/$PREBUILT_SUBDIR/ios-sim"
    - if [[ ! -d "$PREBUILT_DIR" ]]; then ./tools/builddeps.sh --parallel 16 --iphonesim static --prefix $PREBUILT_DIR; fi
    - touch $PREBUILT_DIR/last_use # marking last use to help out during sweeping operations
    - cmake -B build-iphonesim -S .
      -DEXTERNAL-DEPS-DIR:PATH=$PREBUILT_DIR
      -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/iphonesimulator.cmake
      -DENABLE_SWIFT:BOOL=TRUE
    - cmake --build build-iphonesim --parallel 16
    - cmake --install build-iphonesim --prefix ${INSTALL_PATH} --strip
    - cmake --install build-iphonesim --prefix ${INSTALL_PATH} --component gdk-dev


build_mingw64_windows:
  tags:
    - ga
  stage: build
  variables:
    INSTALL_PATH: "install-gdk"
  script:
    - cmake -B build-windows -S .
      -DEXTERNAL-DEPS-DIR=/prebuild/mingw-w64
      -DCMAKE_TOOLCHAIN_FILE=cmake/profiles/windows-mingw-w64.cmake
    - cmake --build build-windows --parallel 16
    - cmake --install build-windows --prefix $INSTALL_PATH --strip
    - cmake --install build-windows --prefix $INSTALL_PATH --component gdk-dev
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 hour
    when: on_success
    paths:
    - $INSTALL_PATH



apidocs:
  tags:
    - ga
  stage: build
  artifacts:
    expire_in: 14 days
    when: on_success
    paths:
    - apidocs.tar.gz
  script:
    - virtualenv -p python3 .venv
    - source .venv/bin/activate
    - pip3 install -r docs/requirements.txt
    - sphinx-build -b html -a -c docs/source docs/source docs/build/html
    - cd docs/build && tar czf ../../apidocs.tar.gz html/ && cd ../..
    - deactivate



package_release:
  tags:
    - garelease
  stage: deploy
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 14 days
    paths:
    - $CI_PROJECT_DIR/gdk_dist
    when: on_success
  script:
    - cd $CI_PROJECT_DIR
    - mkdir gdk-android-symbols
    - mkdir -p gdk_dist/share/python
    - find gdk-android-jni -name "*.syms" -type f -exec cp --parents {} gdk-android-symbols \;
    - tar -czf gdk_dist/gdk-android-symbols.tar.gz gdk-android-symbols --remove-files
    - find gdk-android-jni -name "*.a" -type f -delete
    - find gdk-android-jni -name "*.syms" -type f -delete
    - tar -czf gdk_dist/gdk-android-jni.tar.gz gdk-android-jni --remove-files
    - tar -czf gdk_dist/gdk-iphone.tar.gz gdk-iphone --remove-files
    - tar -czf gdk_dist/gdk-iphone-sim.tar.gz gdk-iphone-sim --remove-files
    - find gdk-python/ -name *.whl -exec mv {} gdk_dist/share/python \;
    - cd gdk_dist
    - /opt/process_release
  needs:
    - build-android
    - build_gcc_bullseye
    - build_gcc_ubuntu20.04
    - build_clang_osx
    - build_clang_osx_m1
    - build_osx_ios
    - build_osx_ios_sim
    - apidocs
    - test_clang_bullseye # waiting for tests to pass

cp_gcloud:
  image: blockstream/gcloud-docker-tf:1.1.7
  tags:
    - ga
  stage: publish
  script:
    - echo gs://green-gdk-builds/$CI_PROJECT_NAME-$CI_COMMIT_SHA
    - TMPF=$(mktemp) || exit 1
    - echo $GCLOUD_PUSH_KEY > $TMPF
    - export GOOGLE_APPLICATION_CREDENTIALS=$TMPF
    - gcloud auth activate-service-account --key-file=$TMPF
    - gsutil cp -r $CI_PROJECT_DIR/gdk_dist gs://green-gdk-builds/$CI_PROJECT_NAME-$CI_COMMIT_SHA
  needs:
  - package_release

cp_gcloud_master:
  image: blockstream/gcloud-docker-tf:1.1.7
  tags:
    - ga
  stage: publish
  only:
    refs:
      - master
  script:
    - TMPF=$(mktemp) || exit 1
    - echo $GCLOUD_PUSH_KEY > $TMPF
    - export GOOGLE_APPLICATION_CREDENTIALS=$TMPF
    - gcloud auth activate-service-account --key-file=$TMPF
    - gsutil rm -r gs://green-gdk-builds/gdk-master || echo fail # avoid failing when dir does not exist
    - gsutil cp -r $CI_PROJECT_DIR/gdk_dist gs://green-gdk-builds/gdk-master
  dependencies:
  - package_release


